---
import Base from "@layouts/Base.astro";
import Page from "@layouts/Page.astro";
---

<Base meta_title="Calculadora de Notas">
    <Page title="Calculadora de Notas">
      <p class="mb-8 text-gray-700 dark:text-gray-300">
        En este apartado podrás calcular la nota que necesitas en una evaluación para alcanzar la nota final que deseas en un ramo. Especialmente diseñada para el sistema de evaluación chileno (escala 1.0 a 7.0).
      </p>
  
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 max-w-md mx-auto">
        <h3 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Ingresa aquí tus notas actuales:</h3>
        
        <div class="mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg">
          <p class="text-sm text-gray-600 dark:text-gray-400">
            <strong>Instrucciones:</strong> Agrega tus notas (1.0-7.0) y sus respectivos porcentajes. 
            La calculadora te dirá qué nota necesitas en el porcentaje restante para alcanzar tu meta.
          </p>
        </div>
        
        <div id="notas-container">
          <div class="mb-4 flex">
            <input type="text" placeholder="Nota, Ej: 5.5" class="nota bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded-l px-3 py-2 w-1/2" />
            <input type="number" placeholder="Porcentaje, Ej: 20" class="porcentaje bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 px-3 py-2 w-1/3" />
            <button class="eliminar-nota bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-r">X</button>
          </div>
        </div>
        
        <div class="flex space-x-2 mb-4">
          <button class="agregar-nota bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded flex-grow">
            <i class="fas fa-plus mr-1"></i> Agregar nota
          </button>
          <button id="limpiar-notas" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded">
            <i class="fas fa-trash"></i> Limpiar
          </button>
        </div>
        
        <div class="mb-4">
          <label for="notaMeta" class="block text-gray-700 dark:text-gray-300 mb-2">Nota que deseo obtener:</label>
          <input type="number" id="notaMeta" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded px-3 py-2 w-full" value="4.0" step="0.1" min="1.0" max="7.0">
        </div>
        
        <button id="calcular" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded w-full mb-4">
          Calcular Nota Faltante
        </button>
        
        <p id="error-mensaje" class="text-red-500 mt-2"></p>
        <div id="resultado-container" class="hidden mt-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
          <p id="resultado" class="text-lg font-semibold text-gray-800 dark:text-white"></p>
          <p id="resultado-adicional" class="text-sm text-gray-600 dark:text-gray-400 mt-2"></p>
        </div>
        
        <button id="configBtn" class="text-green-500 hover:text-green-400 mt-4">
          Configuración
        </button>
      </div>
      
      <p class="text-center text-sm mt-4 text-gray-600 dark:text-gray-400">
        Creado por 
        <a href="https://github.com/JaimeRiquelme" target="_blank" rel="noopener noreferrer" class="text-blue-500 hover:text-blue-600">
          <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
          Jaime Riquelme
        </a>
      </p>
  
      <!-- Modal de Configuración -->
      <div id="configModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 dark:bg-gray-900 dark:bg-opacity-75 hidden items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full relative">
          <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-green-500">Configuración</h2>
          <div class="mb-4">
            <label for="notaMinima" class="block text-gray-700 dark:text-gray-300 mb-2">Nota mínima:</label>
            <input type="number" id="notaMinima" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded px-3 py-2 w-full" step="0.1" min="0" max="10">
          </div>
          <div class="mb-4">
            <label for="notaMaxima" class="block text-gray-700 dark:text-gray-300 mb-2">Nota máxima:</label>
            <input type="number" id="notaMaxima" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded px-3 py-2 w-full" step="0.1" min="0" max="10">
          </div>
          <div class="mb-4">
            <label for="notaAprobacion" class="block text-gray-700 dark:text-gray-300 mb-2">Nota mínima para aprobar:</label>
            <input type="number" id="notaAprobacion" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded px-3 py-2 w-full" step="0.1" min="0" max="10">
          </div>
          <div class="mb-4">
            <label for="notaDeseada" class="block text-gray-700 dark:text-gray-300 mb-2">Nota predeterminada deseada:</label>
            <input type="number" id="notaDeseada" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded px-3 py-2 w-full" step="0.1" min="0" max="10">
          </div>
          <p id="configError" class="text-red-500 mb-4"></p>
          <div class="flex justify-between">
            <button id="cancelarConfig" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">CANCELAR</button>
            <button id="guardarConfig" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">GUARDAR</button>
          </div>
        </div>
      </div>
    </Page>
</Base>

<style>
  #configModal {
    z-index: 9999;
  }
</style>

<script>
  interface Config {
    notaMinima: number;
    notaMaxima: number;
    notaAprobacion: number;
    notaDeseada: number;
  }

  let CONFIG: Config = {
    notaMinima: 1.0,
    notaMaxima: 7.0,
    notaAprobacion: 4.0,
    notaDeseada: 4.0
  };

  document.addEventListener('DOMContentLoaded', () => {
    const notasContainer = document.getElementById('notas-container') as HTMLDivElement | null;
    const agregarNotaBtn = document.querySelector('.agregar-nota') as HTMLButtonElement | null;
    const calcularBtn = document.getElementById('calcular') as HTMLButtonElement | null;
    const limpiarBtn = document.getElementById('limpiar-notas') as HTMLButtonElement | null;
    const resultadoContainer = document.getElementById('resultado-container') as HTMLDivElement | null;
    const resultadoP = document.getElementById('resultado') as HTMLParagraphElement | null;
    const resultadoAdicional = document.getElementById('resultado-adicional') as HTMLParagraphElement | null;
    const errorMensaje = document.getElementById('error-mensaje') as HTMLParagraphElement | null;
    const configBtn = document.getElementById('configBtn') as HTMLButtonElement | null;
    const configModal = document.getElementById('configModal') as HTMLDivElement | null;
    const cancelarConfigBtn = document.getElementById('cancelarConfig') as HTMLButtonElement | null;
    const guardarConfigBtn = document.getElementById('guardarConfig') as HTMLButtonElement | null;
    const configError = document.getElementById('configError') as HTMLParagraphElement | null;
    const notaMetaInput = document.getElementById('notaMeta') as HTMLInputElement | null;

    function validarNota(valor: string): boolean {
      const nota = parseFloat(valor);
      return !isNaN(nota) && nota >= CONFIG.notaMinima && nota <= CONFIG.notaMaxima && /^\d+(\.\d)?$/.test(valor);
    }

    function mostrarError(mensaje: string): void {
      if (errorMensaje) {
        errorMensaje.textContent = mensaje;
        errorMensaje.classList.remove('hidden');
      }
    }

    function limpiarError(): void {
      if (errorMensaje) errorMensaje.textContent = '';
    }
    
    function crearFilaNota() {
      const nuevaNota = document.createElement('div');
      nuevaNota.className = 'mb-4 flex';
      nuevaNota.innerHTML = `
        <input type="text" placeholder="Nota, Ej: 5.5" class="nota bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded-l px-3 py-2 w-1/2" />
        <input type="number" placeholder="Porcentaje, Ej: 20" class="porcentaje bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 px-3 py-2 w-1/3" />
        <button class="eliminar-nota bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-r">X</button>
      `;
      notasContainer?.appendChild(nuevaNota);
      return nuevaNota;
    }

    notasContainer?.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement;
      if (target.classList.contains('nota')) {
        if (!validarNota(target.value)) {
          mostrarError(`Formato de nota inválido. Use valores entre ${CONFIG.notaMinima.toFixed(1)} y ${CONFIG.notaMaxima.toFixed(1)} con un decimal.`);
        } else {
          limpiarError();
        }
      }
      if (target.classList.contains('porcentaje')) {
        const porcentaje = parseFloat(target.value);
        if (isNaN(porcentaje) || porcentaje <= 0 || porcentaje > 100) {
          mostrarError('El porcentaje debe ser un valor entre 1 y 100.');
        } else {
          limpiarError();
        }
      }
    });

    agregarNotaBtn?.addEventListener('click', () => {
      crearFilaNota();
    });
    
    limpiarBtn?.addEventListener('click', () => {
      if (notasContainer) {
        notasContainer.innerHTML = '';
        crearFilaNota();
      }
      if (resultadoContainer) {
        resultadoContainer.classList.add('hidden');
      }
      limpiarError();
    });

    notasContainer?.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains('eliminar-nota')) {
        if (document.querySelectorAll('.nota').length > 1) {
          target.parentElement?.remove();
        } else {
          mostrarError('Debe haber al menos una nota en la calculadora.');
        }
      }
    });

    calcularBtn?.addEventListener('click', () => {
      const notas = Array.from(document.querySelectorAll('.nota')) as HTMLInputElement[];
      const porcentajes = Array.from(document.querySelectorAll('.porcentaje')) as HTMLInputElement[];
      const notaDeseada = parseFloat(notaMetaInput?.value || CONFIG.notaDeseada.toString());

      if (isNaN(notaDeseada) || notaDeseada < CONFIG.notaMinima || notaDeseada > CONFIG.notaMaxima) {
        mostrarError(`La nota deseada debe estar entre ${CONFIG.notaMinima.toFixed(1)} y ${CONFIG.notaMaxima.toFixed(1)}`);
        return;
      }

      let sumaPonderada = 0;
      let sumaPorcentajes = 0;
      let hayErrores = false;

      for (let i = 0; i < notas.length; i++) {
        const nota = parseFloat(notas[i].value);
        const porcentaje = parseFloat(porcentajes[i].value) / 100;

        if (!validarNota(notas[i].value) || isNaN(porcentaje) || porcentaje <= 0 || porcentaje > 1) {
          hayErrores = true;
          mostrarError('Hay errores en las notas o porcentajes. Por favor, revise los valores ingresados.');
          break;
        }

        sumaPonderada += nota * porcentaje;
        sumaPorcentajes += porcentaje;
      }

      if (hayErrores) {
        return;
      }

      if (sumaPorcentajes >= 1) {
        mostrarError('La suma de los porcentajes no puede ser mayor al 100%');
        return;
      }

      const porcentajeFaltante = 1 - sumaPorcentajes;
      const notaNecesaria = (notaDeseada - sumaPonderada) / porcentajeFaltante;

      if (resultadoContainer) {
        resultadoContainer.classList.remove('hidden');
      }

      if (resultadoP && resultadoAdicional) {
        if (notaNecesaria <= CONFIG.notaMinima) {
          resultadoP.textContent = `¡Felicidades! Ya has alcanzado la nota deseada.`;
          resultadoAdicional.textContent = `Tu promedio actual es ${sumaPonderada.toFixed(1)}, que ya cumple con tu meta de ${notaDeseada.toFixed(1)}.`;
          resultadoP.classList.add('text-green-600', 'dark:text-green-400');
        } else if (notaNecesaria <= CONFIG.notaMaxima) {
          resultadoP.textContent = `Necesitas un ${notaNecesaria.toFixed(1)} en el ${(porcentajeFaltante * 100).toFixed(0)}% restante.`;
          
          if (notaNecesaria > CONFIG.notaMaxima - 1) {
            resultadoAdicional.textContent = `¡Atención! Necesitas una nota muy alta. Te recomendamos estudiar con tiempo.`;
            resultadoP.classList.add('text-yellow-600', 'dark:text-yellow-400');
          } else if (notaNecesaria > CONFIG.notaAprobacion) {
            resultadoAdicional.textContent = `La nota es alcanzable con un buen estudio.`;
            resultadoP.classList.remove('text-yellow-600', 'text-red-600', 'dark:text-yellow-400', 'dark:text-red-400');
          } else {
            resultadoAdicional.textContent = `La nota está dentro del rango aprobatorio y es alcanzable.`;
            resultadoP.classList.add('text-green-600', 'dark:text-green-400');
          }
        } else {
          resultadoP.textContent = `No es posible alcanzar la nota ${notaDeseada.toFixed(1)} con las calificaciones actuales.`;
          resultadoAdicional.textContent = `Necesitarías un ${notaNecesaria.toFixed(1)}, que excede la nota máxima (${CONFIG.notaMaxima.toFixed(1)}).`;
          resultadoP.classList.add('text-red-600', 'dark:text-red-400');
        }
      }
      limpiarError();
    });

    // Configuración modal
    configBtn?.addEventListener('click', () => {
      configModal?.classList.remove('hidden');
      configModal?.classList.add('flex');
      (document.getElementById('notaMinima') as HTMLInputElement).value = CONFIG.notaMinima.toString();
      (document.getElementById('notaMaxima') as HTMLInputElement).value = CONFIG.notaMaxima.toString();
      (document.getElementById('notaAprobacion') as HTMLInputElement).value = CONFIG.notaAprobacion.toString();
      (document.getElementById('notaDeseada') as HTMLInputElement).value = CONFIG.notaDeseada.toString();
    });

    cancelarConfigBtn?.addEventListener('click', () => {
      configModal?.classList.add('hidden');
      configModal?.classList.remove('flex');
    });

    guardarConfigBtn?.addEventListener('click', () => {
      const notaMinima = parseFloat((document.getElementById('notaMinima') as HTMLInputElement).value);
      const notaMaxima = parseFloat((document.getElementById('notaMaxima') as HTMLInputElement).value);
      const notaAprobacion = parseFloat((document.getElementById('notaAprobacion') as HTMLInputElement).value);
      const notaDeseada = parseFloat((document.getElementById('notaDeseada') as HTMLInputElement).value);

      if (notaMinima >= notaMaxima || notaAprobacion < notaMinima || notaAprobacion > notaMaxima || notaDeseada < notaMinima || notaDeseada > notaMaxima) {
        if (configError) configError.textContent = 'Configuración inválida. Por favor, revise los valores.';
        return;
      }

      CONFIG = { notaMinima, notaMaxima, notaAprobacion, notaDeseada };
      if (notaMetaInput) {
        notaMetaInput.value = notaDeseada.toString();
        notaMetaInput.min = notaMinima.toString();
        notaMetaInput.max = notaMaxima.toString();
      }
      configModal?.classList.add('hidden');
      configModal?.classList.remove('flex');
      if (configError) configError.textContent = '';
    });

    // Inicialización
    if (notaMetaInput) {
      notaMetaInput.value = CONFIG.notaDeseada.toString();
    }
  });
</script>